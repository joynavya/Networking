---
- name: Install Docker and Deploy Web App
  hosts: ec2_instances
  become: yes
  gather_facts: yes
  tasks:
    - name: Update package list
      apt:
        update_cache: yes

    - name: Install required packages
      apt:
        name:
          - python3-pip
          - python3-dev
          - python3-venv
        state: present

    - name: Ensure virtual environment directory exists
      file:
        path: /home/ubuntu/myenv
        state: directory

    - name: Create virtual environment for Python
      command: python3 -m venv /home/ubuntu/myenv
      when: not ansible_facts['os_family'] == 'RedHat'

    - name: Install Docker Python module in virtual environment
      pip:
        executable: /home/ubuntu/myenv/bin/pip
        name: docker

    - name: Install Docker
      apt:
        name: docker.io
        state: present

    - name: Enable and start Docker service
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Create app directory if it doesn't exist
      file:
        path: /home/ubuntu/webapp
        state: directory

    - name: Copy webapp.html to EC2 instance
      copy:
        src: /mnt/d/DBS/Assignment/Network/index.html
        dest: /home/ubuntu/webapp/index.html

    - name: Check if index.html exists on EC2 instance
      stat:
        path: /home/ubuntu/webapp/index.html
      register: file_stat

    - name: Display file status
      debug:
        msg: "File exists: {{ file_stat.stat.exists }}"

    - name: Create Dockerfile to serve index.html
      copy:
        dest: /home/ubuntu/webapp/Dockerfile
        content: |
          FROM python:3.8-slim
          WORKDIR /usr/src/app
          COPY index.html .
          EXPOSE 5000
          CMD ["python", "-m", "http.server", "5000", "--bind", "0.0.0.0"]

    - name: Build Docker Image manually
      command: docker build -t webapp /home/ubuntu/webapp
      become: true  

    - name: Run Docker Container
      docker_container:
        name: webapp_container
        image: webapp
        state: started
        restart_policy: always
        published_ports:
          - "5000:5000"  # Mapping port 5000 to 5000 inside the container

    - name: Check Docker container status
      command: docker ps
      register: docker_ps
      changed_when: false

    - name: Display Docker container status
      debug:
        msg: "{{ docker_ps.stdout }}"

